{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\shoppingmall\\\\shoppingmall-fe\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$();\nimport api from \"../api/apiClient\";\nimport { createContext, useReducer, useEffect, useState, useContext } from \"react\";\nimport { AuthContext } from \"./AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nconst initialState = {\n  cartItems: []\n};\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_CART\":\n      return {\n        ...state,\n        cartItems: action.payload\n      };\n    case \"ADD_ITEM\":\n      const exist = state.cartItems.find(item => item.id === action.payload.id);\n      if (exist) {\n        return {\n          // 이미 카트에 존재하는 상품은 수량만 update\n          ...state,\n          cartItems: state.cartItems.map(item => item.id === action.payload.id ? {\n            ...item,\n            quantity: item.quantity + action.payload.quantity\n          } : item)\n        };\n      } else {\n        return {\n          // 카트에 없으면 추가\n          ...state,\n          cartItems: [...state.cartItems, action.payload]\n        };\n      }\n    case \"UPDATE_ITEM\":\n      // 장바구니에서 직접 수량 변경 시 사용 (이미 존재하는 상품 수량 update)\n      return {\n        ...state,\n        cartItems: state.cartItems.map(item => item.id === action.payload.id ? {\n          ...item,\n          quantity: action.payload.quantity\n        } : item)\n      };\n    case \"REMOVE_ITEM\":\n      return {\n        ...state,\n        cartItems: state.cartItems.filter(item => item.id !== action.payload.id)\n      };\n    case \"CLEAR_CART\":\n      return {\n        ...state,\n        cartItems: []\n      };\n    default:\n      return state;\n  }\n};\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cartState, dispatch] = useReducer(cartReducer, initialState);\n  const {\n    userInfo\n  } = useContext(AuthContext);\n  const [initialized, setInitialized] = useState(false);\n\n  // 최초 렌더링 시 localStorage에서 불러오기 (비회원)\n  useEffect(() => {\n    if (!userInfo.token) {\n      const localItems = JSON.parse(localStorage.getItem(\"cartItems\")) || [];\n      dispatch({\n        type: \"SET_CART\",\n        payload: localItems\n      });\n    }\n    setInitialized(true);\n  }, [userInfo.token]);\n\n  // 비회원일 때는 localStorage에 저장\n  useEffect(() => {\n    if (!userInfo.token && initialized) {\n      localStorage.setItem(\"cartItems\", JSON.stringify(cartState.cartItems));\n    }\n  }, [cartState.cartItems, userInfo.token, initialized]);\n\n  // 로그인 시 장바구니 병합\n  useEffect(() => {\n    const mergeCart = async () => {\n      try {\n        const localItems = JSON.parse(localStorage.getItem(\"cartItems\")) || [];\n\n        // 병합할 로컬 장바구니가 없으면 병합 로직 패스\n        if (localItems.length === 0) return;\n\n        // 서버 전송용 payload 생성\n        const requestItems = localItems.map(item => ({\n          productId: item.id,\n          quantity: item.quantity\n        }));\n\n        // 병합된 장바구니 서버에 저장\n        await api.post('/cart', requestItems);\n\n        // 병합 후 서버에서 최신 장바구니 다시 조회\n        const updated = await api.get('/cart');\n        dispatch({\n          type: \"SET_CART\",\n          payload: updated.data\n        });\n\n        // 병합 완료 후 로컬 데이터 정리 및 병합 플래그 저장\n        localStorage.removeItem(\"cartItems\");\n        localStorage.setItem(\"cartMerged\", \"true\");\n      } catch (error) {\n        console.error(\"장바구니 병합 실패:\", error);\n      }\n    };\n    const needCartMerge = userInfo.token && localStorage.getItem(\"cartItems\") && localStorage.getItem(\"cartMerged\") !== \"true\";\n    if (needCartMerge) {\n      mergeCart();\n    }\n  }, [userInfo.token]);\n\n  // 로그인 상태에서 장바구니 조회 (병합이 이미 끝났을 경우)\n  useEffect(() => {\n    const fetchCart = async () => {\n      try {\n        const response = await api.get('/cart');\n        dispatch({\n          type: \"SET_CART\",\n          payload: response.data\n        });\n      } catch (error) {\n        console.error(\"장바구니 조회 실패:\", error);\n      }\n    };\n    const isLoggedIn = userInfo.token;\n    const alreadyMerged = localStorage.getItem(\"cartMerged\") === \"true\";\n    if (isLoggedIn && alreadyMerged) {\n      fetchCart();\n    }\n  }, [userInfo.token]);\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartState,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"lpqJR73nxAtvSF7n1u9xdJtAHGc=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["api","createContext","useReducer","useEffect","useState","useContext","AuthContext","jsxDEV","_jsxDEV","CartContext","initialState","cartItems","cartReducer","state","action","type","payload","exist","find","item","id","map","quantity","filter","CartProvider","children","_s","cartState","dispatch","userInfo","initialized","setInitialized","token","localItems","JSON","parse","localStorage","getItem","setItem","stringify","mergeCart","length","requestItems","productId","post","updated","get","data","removeItem","error","console","needCartMerge","fetchCart","response","isLoggedIn","alreadyMerged","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/project/shoppingmall/shoppingmall-fe/src/context/CartContext.js"],"sourcesContent":["import api from \"../api/apiClient\";\r\nimport { createContext, useReducer, useEffect, useState, useContext } from \"react\";\r\nimport { AuthContext } from \"./AuthContext\";\r\n\r\nexport const CartContext = createContext();\r\n\r\nconst initialState = {\r\n  cartItems: []\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n  switch (action.type) {\r\n\r\n    case \"SET_CART\":\r\n      return { ...state, cartItems: action.payload };\r\n\r\n    case \"ADD_ITEM\":\r\n      const exist = state.cartItems.find(item => item.id === action.payload.id);\r\n      if (exist) {\r\n        return { // 이미 카트에 존재하는 상품은 수량만 update\r\n          ...state,\r\n          cartItems: state.cartItems.map(item =>\r\n            item.id === action.payload.id\r\n              ? { ...item, quantity: item.quantity + action.payload.quantity }\r\n              : item\r\n          )\r\n        };\r\n      } else {\r\n        return { // 카트에 없으면 추가\r\n          ...state,\r\n          cartItems: [...state.cartItems, action.payload]\r\n        };\r\n      }\r\n\r\n    case \"UPDATE_ITEM\": // 장바구니에서 직접 수량 변경 시 사용 (이미 존재하는 상품 수량 update)\r\n      return {\r\n        ...state,\r\n        cartItems: state.cartItems.map(item =>\r\n          item.id === action.payload.id\r\n            ? { ...item, quantity: action.payload.quantity }\r\n            : item\r\n        )\r\n      };\r\n\r\n    case \"REMOVE_ITEM\":\r\n      return {\r\n        ...state,\r\n        cartItems: state.cartItems.filter(item => item.id !== action.payload.id)\r\n      };\r\n\r\n    case \"CLEAR_CART\":\r\n      return { ...state, cartItems: [] };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [cartState, dispatch] = useReducer(cartReducer, initialState);\r\n  const { userInfo } = useContext(AuthContext);\r\n  const [initialized, setInitialized] = useState(false);\r\n\r\n  // 최초 렌더링 시 localStorage에서 불러오기 (비회원)\r\n  useEffect(() => {\r\n    if (!userInfo.token) {\r\n      const localItems = JSON.parse(localStorage.getItem(\"cartItems\")) || [];\r\n      dispatch({ type: \"SET_CART\", payload: localItems });\r\n    }\r\n    setInitialized(true);\r\n  }, [userInfo.token]);\r\n\r\n  // 비회원일 때는 localStorage에 저장\r\n  useEffect(() => {\r\n    if(!userInfo.token && initialized) {\r\n      localStorage.setItem(\"cartItems\", JSON.stringify(cartState.cartItems));\r\n    }\r\n  }, [cartState.cartItems, userInfo.token, initialized]);\r\n\r\n  // 로그인 시 장바구니 병합\r\n  useEffect(() => {\r\n    const mergeCart = async () => {\r\n      try {\r\n        const localItems = JSON.parse(localStorage.getItem(\"cartItems\")) || [];\r\n\r\n        // 병합할 로컬 장바구니가 없으면 병합 로직 패스\r\n        if (localItems.length === 0) return;\r\n\r\n        // 서버 전송용 payload 생성\r\n        const requestItems = localItems.map(item => ({\r\n          productId: item.id,\r\n          quantity: item.quantity\r\n        }));\r\n\r\n        // 병합된 장바구니 서버에 저장\r\n        await api.post('/cart', requestItems);\r\n\r\n        // 병합 후 서버에서 최신 장바구니 다시 조회\r\n        const updated = await api.get('/cart');\r\n        dispatch({ type: \"SET_CART\", payload: updated.data });\r\n\r\n        // 병합 완료 후 로컬 데이터 정리 및 병합 플래그 저장\r\n        localStorage.removeItem(\"cartItems\");\r\n        localStorage.setItem(\"cartMerged\", \"true\");\r\n      } catch (error) {\r\n        console.error(\"장바구니 병합 실패:\", error);\r\n      }\r\n    };\r\n\r\n    const needCartMerge = userInfo.token && localStorage.getItem(\"cartItems\") && localStorage.getItem(\"cartMerged\") !== \"true\";\r\n\r\n    if (needCartMerge) {\r\n      mergeCart();\r\n    }\r\n  }, [userInfo.token]);\r\n\r\n  // 로그인 상태에서 장바구니 조회 (병합이 이미 끝났을 경우)\r\n  useEffect(() => {\r\n    const fetchCart = async () => {\r\n      try {\r\n        const response = await api.get('/cart');\r\n        dispatch({ type: \"SET_CART\", payload: response.data });\r\n      } catch (error) {\r\n        console.error(\"장바구니 조회 실패:\", error);\r\n      }\r\n    };\r\n\r\n    const isLoggedIn = userInfo.token;\r\n    const alreadyMerged = localStorage.getItem(\"cartMerged\") === \"true\";\r\n\r\n    if (isLoggedIn && alreadyMerged) {\r\n      fetchCart();\r\n    }\r\n  }, [userInfo.token]);\r\n\r\n\r\n\r\n  return (\r\n    <CartContext.Provider value={{ cartState, dispatch }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}