{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport api from \"../../../api/apiClient\";\nimport { Link } from \"react-router-dom\";\nfunction OrderManagement() {\n  _s();\n  const [ordersByOrderId, setOrdersByOrderId] = useState({});\n  const [page, setPage] = useState(0);\n  const [size, setSize] = useState(10);\n  const [totalPages, setTotalPages] = useState(0);\n  useEffect(() => {\n    const fetchOrders = async () => {\n      try {\n        const response = await api.get(`/admin/order?page=${page}&size=${size}`);\n        const ordersMap = {};\n        response.data.content.forEach(item => {\n          const orderId = item.orderId;\n          if (!ordersMap[orderId]) {\n            ordersMap[orderId] = {\n              orderId: item.orderId,\n              orderDate: item.orderDate,\n              totalPrice: item.totalPrice,\n              status: item.status,\n              email: item.email,\n              items: []\n            };\n          }\n          ordersMap[orderId].items.push(item);\n        });\n        setOrdersByOrderId(ordersMap);\n        setTotalPages(response.data.totalPages);\n      } catch (error) {\n        console.error(\"주문 내역을 불러오지 못했습니다.\", error);\n      }\n    };\n    fetchOrders();\n  }, [page, size]);\n  const orderList = Object.values(ordersByOrderId).sort((a, b) => b.orderId - a.orderId);\n  const getOrderStatusText = (status, orderDate) => {\n    const orderDateObj = new Date(orderDate);\n    const today = new Date();\n    const deliveryDate = new Date(orderDateObj);\n    deliveryDate.setDate(deliveryDate.getDate() + 3);\n    if (today >= deliveryDate) return \"배송완료\";\n    if (status === \"PAID\") return \"결제완료\";\n    return status;\n  };\n}\n_s(OrderManagement, \"YsXLfwyLt8okncubAsiR6rep4H8=\");\n_c = OrderManagement;\nexport default OrderManagement;\nvar _c;\n$RefreshReg$(_c, \"OrderManagement\");","map":{"version":3,"names":["useEffect","useState","api","Link","OrderManagement","_s","ordersByOrderId","setOrdersByOrderId","page","setPage","size","setSize","totalPages","setTotalPages","fetchOrders","response","get","ordersMap","data","content","forEach","item","orderId","orderDate","totalPrice","status","email","items","push","error","console","orderList","Object","values","sort","a","b","getOrderStatusText","orderDateObj","Date","today","deliveryDate","setDate","getDate","_c","$RefreshReg$"],"sources":["C:/project/shoppingmall/shoppingmall-fe/src/admin/pages/order/OrderManagement.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport api from \"../../../api/apiClient\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction OrderManagement() {\r\n  const [ordersByOrderId, setOrdersByOrderId] = useState({});\r\n  const [page, setPage] = useState(0);\r\n  const [size, setSize] = useState(10);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const fetchOrders = async () => {\r\n      try {\r\n        const response = await api.get(`/admin/order?page=${page}&size=${size}`);\r\n        const ordersMap = {};\r\n\r\n        response.data.content.forEach((item) => {\r\n          const orderId = item.orderId;\r\n\r\n          if (!ordersMap[orderId]) {\r\n            ordersMap[orderId] = {\r\n              orderId: item.orderId,\r\n              orderDate: item.orderDate,\r\n              totalPrice: item.totalPrice,\r\n              status: item.status,\r\n              email: item.email,\r\n              items: [],\r\n            };\r\n          }\r\n\r\n          ordersMap[orderId].items.push(item);\r\n        });\r\n\r\n        setOrdersByOrderId(ordersMap);\r\n        setTotalPages(response.data.totalPages);\r\n      } catch (error) {\r\n        console.error(\"주문 내역을 불러오지 못했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    fetchOrders();\r\n  }, [page, size]);\r\n\r\n  const orderList = Object.values(ordersByOrderId).sort(\r\n    (a, b) => b.orderId - a.orderId\r\n  );\r\n\r\n  const getOrderStatusText = (status, orderDate) => {\r\n    const orderDateObj = new Date(orderDate);\r\n    const today = new Date();\r\n    const deliveryDate = new Date(orderDateObj);\r\n    deliveryDate.setDate(deliveryDate.getDate() + 3);\r\n\r\n    if (today >= deliveryDate) return \"배송완료\";\r\n    if (status === \"PAID\") return \"결제완료\";\r\n    return status;\r\n  };\r\n\r\n  \r\n}\r\n\r\nexport default OrderManagement;\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,GAAG,MAAM,wBAAwB;AACxC,SAASC,IAAI,QAAQ,kBAAkB;AAEvC,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EAE/CD,SAAS,CAAC,MAAM;IACd,MAAMc,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMb,GAAG,CAACc,GAAG,CAAC,qBAAqBR,IAAI,SAASE,IAAI,EAAE,CAAC;QACxE,MAAMO,SAAS,GAAG,CAAC,CAAC;QAEpBF,QAAQ,CAACG,IAAI,CAACC,OAAO,CAACC,OAAO,CAAEC,IAAI,IAAK;UACtC,MAAMC,OAAO,GAAGD,IAAI,CAACC,OAAO;UAE5B,IAAI,CAACL,SAAS,CAACK,OAAO,CAAC,EAAE;YACvBL,SAAS,CAACK,OAAO,CAAC,GAAG;cACnBA,OAAO,EAAED,IAAI,CAACC,OAAO;cACrBC,SAAS,EAAEF,IAAI,CAACE,SAAS;cACzBC,UAAU,EAAEH,IAAI,CAACG,UAAU;cAC3BC,MAAM,EAAEJ,IAAI,CAACI,MAAM;cACnBC,KAAK,EAAEL,IAAI,CAACK,KAAK;cACjBC,KAAK,EAAE;YACT,CAAC;UACH;UAEAV,SAAS,CAACK,OAAO,CAAC,CAACK,KAAK,CAACC,IAAI,CAACP,IAAI,CAAC;QACrC,CAAC,CAAC;QAEFd,kBAAkB,CAACU,SAAS,CAAC;QAC7BJ,aAAa,CAACE,QAAQ,CAACG,IAAI,CAACN,UAAU,CAAC;MACzC,CAAC,CAAC,OAAOiB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC5C;IACF,CAAC;IAEDf,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACN,IAAI,EAAEE,IAAI,CAAC,CAAC;EAEhB,MAAMqB,SAAS,GAAGC,MAAM,CAACC,MAAM,CAAC3B,eAAe,CAAC,CAAC4B,IAAI,CACnD,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACd,OAAO,GAAGa,CAAC,CAACb,OAC1B,CAAC;EAED,MAAMe,kBAAkB,GAAGA,CAACZ,MAAM,EAAEF,SAAS,KAAK;IAChD,MAAMe,YAAY,GAAG,IAAIC,IAAI,CAAChB,SAAS,CAAC;IACxC,MAAMiB,KAAK,GAAG,IAAID,IAAI,CAAC,CAAC;IACxB,MAAME,YAAY,GAAG,IAAIF,IAAI,CAACD,YAAY,CAAC;IAC3CG,YAAY,CAACC,OAAO,CAACD,YAAY,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;IAEhD,IAAIH,KAAK,IAAIC,YAAY,EAAE,OAAO,MAAM;IACxC,IAAIhB,MAAM,KAAK,MAAM,EAAE,OAAO,MAAM;IACpC,OAAOA,MAAM;EACf,CAAC;AAGH;AAACpB,EAAA,CAvDQD,eAAe;AAAAwC,EAAA,GAAfxC,eAAe;AAyDxB,eAAeA,eAAe;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}